
1second_Timer1_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000128  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d3  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000157  00000000  00000000  00000407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018c  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	49 d0       	rcall	.+146    	; 0xd6 <main>
  44:	54 c0       	rjmp	.+168    	; 0xee <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <usart_init>:
#include <avr/interrupt.h>
volatile uint8_t seconds=0;
volatile uint8_t minutes=0;
void usart_init(void)
{
	UCSRB=(1<<TXEN);
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  4c:	86 e8       	ldi	r24, 0x86	; 134
  4e:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x4D;//value for 12MHz and 9600baud
  50:	8d e4       	ldi	r24, 0x4D	; 77
  52:	89 b9       	out	0x09, r24	; 9
  54:	08 95       	ret

00000056 <usartr_send>:
}
void usartr_send(unsigned char ch)
{
	while(!((UCSRA)&(1<<UDRE)));
  56:	5d 9b       	sbis	0x0b, 5	; 11
  58:	fe cf       	rjmp	.-4      	; 0x56 <usartr_send>
	UDR=ch;
  5a:	8c b9       	out	0x0c, r24	; 12
  5c:	08 95       	ret

0000005e <__vector_8>:
}

ISR(TIMER1_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
	seconds++;
  80:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <seconds>
	if(seconds>59)
  8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
  8e:	8c 33       	cpi	r24, 0x3C	; 60
  90:	38 f0       	brcs	.+14     	; 0xa0 <__vector_8+0x42>
	{
		minutes++;
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		seconds=0;
  9c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <seconds>
	}
	
	usartr_send(seconds);
  a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <seconds>
  a4:	d8 df       	rcall	.-80     	; 0x56 <usartr_send>
	usartr_send(minutes);
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  aa:	d5 df       	rcall	.-86     	; 0x56 <usartr_send>
	
	TCNT1H=(-11719)>>8;
  ac:	82 ed       	ldi	r24, 0xD2	; 210
  ae:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=(-11719)&0xFF;
  b0:	89 e3       	ldi	r24, 0x39	; 57
  b2:	8c bd       	out	0x2c, r24	; 44
	
}
  b4:	ff 91       	pop	r31
  b6:	ef 91       	pop	r30
  b8:	bf 91       	pop	r27
  ba:	af 91       	pop	r26
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	7f 91       	pop	r23
  c2:	6f 91       	pop	r22
  c4:	5f 91       	pop	r21
  c6:	4f 91       	pop	r20
  c8:	3f 91       	pop	r19
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

int main(void)
{
   
	TCNT1H=(-11719)>>8;
  d6:	82 ed       	ldi	r24, 0xD2	; 210
  d8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L=(-11719)&0xFF;// over flow after 11719 clocks__works for12MHZ...[1/12000000x1024x11719=1 second]
  da:	89 e3       	ldi	r24, 0x39	; 57
  dc:	8c bd       	out	0x2c, r24	; 44
	TCCR1A=0x00;//normal mode
  de:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;//internal clock ,prescaler 1:1024
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	8e bd       	out	0x2e, r24	; 46
	TIMSK=(1<<TOIE1);// enable timer1 interrupt
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	89 bf       	out	0x39, r24	; 57
	sei();
  e8:	78 94       	sei
	usart_init();
  ea:	ae df       	rcall	.-164    	; 0x48 <usart_init>
    while (1) 
    {
		
    }
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x16>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
